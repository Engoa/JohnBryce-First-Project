* {
  margin: 0;
  box-sizing: border-box;
  font-family: var(--ff-text);
}

body {
  padding: 0 1rem;
}
.container-wrapper {
  padding: 0 2rem;
}

input,
button {
  appearance: none;
  border: none;
  border: none;
  background: none;
}
.fieldset {
  width: 100%;
  border-radius: 0.5rem;
  border: 2px solid var(--border);
  background-color: transparent;
  margin: auto;
  padding: 0.5rem;
  @include flexCenter;
  transition: var(--transition-250);
}
.legend {
  font-weight: bold;
  letter-spacing: 2.75px;
  opacity: 0.8;
  font-size: 1.1rem;
  font-size: clamp(1rem, 3vw, 1.1rem);
  color: var(--task-text);
  margin-left: 1.5rem;
  transition: var(--transition-250);
}

.btn {
  cursor: pointer;
  font-size: 1.3rem;
  transition: var(--transition-150);
  color: var(--btn-bg2);

  &:hover {
    transform: scale(1.2);
  }
  &:active {
    transform: scale(0.9);
    opacity: 0.5;
  }
}

.input {
  flex: 1 1 0%;
  background-color: var(--darker);
  border-radius: 0.5rem;
  color: var(--text);
  font-size: 16px;
  transition: var(--transition-150);
  border: 2px solid var(--border);
  outline: none;
  caret-color: var(--btn-bg2);
  min-height: 55px;
  width: 100%;
  padding: 0.5rem;
  padding-left: 1rem;
  @media (max-width: 550px) {
    min-height: 48px;
  }

  &::placeholder {
    color: var(--grey);
    font-size: 1.1rem;
    @media (max-width: 550px) {
      font-size: 0.95rem;
    }
  }
  &:focus-within {
    transform: scale(1.01);
    border: 2px solid var(--accent);
  }
}
//Overrides for default browser colors for placeholder text on inputs!

input[type="date"]::before,
input[type="time"]::before {
  color: var(--text);
  content: attr(placeholder);
}
input[type="date"] {
  color: var(--grey);
}
input[type="time"] {
  color: var(--grey);
}
input[type="time"]:focus,
input[type="time"]:valid {
  color: var(--text);
}
input[type="date"]:focus,
input[type="date"]:valid {
  color: var(--text);
}
input[type="date"]:focus::before,
input[type="date"]:valid::before,
input[type="time"]:focus::before,
input[type="time"]:valid::before {
  content: "" !important;
}
.task .content .text:not(:read-only) {
  border: none;
}

.add-first-task {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 0.6rem;
  margin-top: 2rem;
  .fa-tasks {
    transition: var(--transition-250);
    font-size: 12rem;
    font-size: clamp(8.5rem, 10vw, 12rem);
    color: var(--text);
  }

  p {
    color: var(--text);
    font-weight: bold;
    font-size: 1.7rem;
    font-size: clamp(1.1rem, 3vw, 1.7rem);
    opacity: 0.85;
    transition: var(--transition-250);
    text-transform: uppercase;
  }
  span {
    font-size: 5rem;
    font-size: clamp(4rem, 3vw, 5rem);
  }
}

.btn-cta {
  cursor: pointer;
  color: var(--text);
  background-color: var(--darkest);
  border-radius: 0.5rem;
  font-weight: bold;
  border: 2px solid var(--border);
  transition: var(--transition-250);
  padding: 0.7rem;
  &:hover {
    // Override
    background: var(--btn-bg2) !important;
    color: var(--modal);
  }
}

.task-header-buttons {
  display: flex;
  align-items: center;
  justify-content: center;
  @media (max-width: 550px) {
    padding: 0.5rem;
    width: 80px;
    font-size: 0.65rem;
  }
}
// Hide elements if no tasks are available
.hide-element {
  display: none !important;
}

// Tippy Theme and overrides
.tippy-box[data-theme~="theme"] {
  color: var(--modal);
  background-color: var(--tippy-bg);
  font-size: 0.8rem;
  font-weight: bold;
}

.tippy-arrow {
  color: var(--tippy-bg);
}

.button-wrapper {
  min-width: 150px;
  display: flex;
  .task-header-buttons {
    min-width: 120px;
  }
  &:last-of-type .task-header-buttons {
    margin-left: auto;
  }
  @media (max-width: 550px) {
    min-width: unset;
    .task-header-buttons {
      min-width: 70px;
    }
    &:last-of-type .task-header-buttons {
      margin: auto;
    }
  }
}

.shakeError {
  // Override for task error
  animation: kf_shake 0.55s 1 linear;
  background: var(--task-error) !important;
}
@keyframes kf_shake {
  0% {
    transform: translate(5px, 2.5px) scale(1.02);
  }
  20% {
    transform: translate(-5px, -5px);
  }
  40% {
    transform: translate(2.5px, 1px);
  }
  60% {
    transform: translate(-2.5px, -1px);
  }
  80% {
    transform: translate(1.5px, 0.5px);
  }
  100% {
    transform: translate(0px, 0px) scale(1.02);
  }
}
